# -*- coding: utf-8 -*-
"""PCOS 50

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tCd4Auj8PNqo4HUpiaBQ6A_qHkHejGzV

#Importing Libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""# Importing Dataset"""

df=pd.read_csv('/content/drive/My Drive/PCOS/PCOS_data.csv')

"""Reading the dataset"""

df.head()

"""Number of Columns and Rows"""

df.shape

"""Detailed Description of the dataset"""

df.describe()

"""Names of all columns"""

df.columns

"""Removing the unnecessary columns"""

df = df.drop(['Sl. No','Unnamed: 42','Patient File No.','Marraige Status (Yrs)','Blood Group','Hip(inch)','Waist(inch)'],axis = 1)

df.head()

"""Introducing a new column 'Follicle_count' which gives the count of Follicles."""

df['Follicle_count']=df['Follicle No. (L)'] + df['Follicle No. (R)']

df = df.drop(['Follicle No. (L)','Follicle No. (R)','Avg. F size (L) (mm)', 'Avg. F size (R) (mm)','Endometrium (mm)','Hb(g/dl)'],axis = 1)

"""#EDA

Renaming the columns for ease of working
"""

df.rename(columns={'PCOS (Y/N)':'PCOS',
                   'Age (yrs)':'Age',
                   'Weight (Kg)':'Weight',
                   'Height(Cm)':'Height',
                   'Pulse rate(bpm)':'PulseRate',
                  'RR (breaths/min)':'RR',
                   'Cycle(R/I)':'Cycle',
                   'Pregnant(Y/N)':'Pregnant',
                   'No. of aborptions':'Abortions',
                   'FSH(mIU/mL)':'FSH',
                   'TSH (mIU/L)':'TSH',
                   'LH(mIU/mL)':'LSH',
                   'AMH(ng/mL)':'AMH',
                   'PRL(ng/mL)':'PRL',
                   'Vit D3 (ng/mL)':'VitD3',
                   'PRG(ng/mL)':'PRG',
                   'RBS(mg/dl)':'RBS',
                   'Weight gain(Y/N)':'Weight_gain',
                   'hair growth(Y/N)':'hair_growth',
                   'Skin darkening (Y/N)':'Skin_darkening',
                   'Hair loss(Y/N)':'Hair_loss',
                   'FSH/LH':'FSH_LH_ratio',
                   'Pimples(Y/N)':'Pimples',
                   'Fast food (Y/N)':'Fast_food',
                   'Reg.Exercise(Y/N)':'Reg_exercise',
                   'BP _Systolic (mmHg)':'BP_systolic',
                   'BP _Diastolic (mmHg)':'BP_diastolic',
                   'Waist:Hip Ratio':'W_H_ratio' },  
                 inplace=True)

"""Datatype of Columns"""

df.dtypes

"""Check for Null Values"""

df.isnull().any()

"""## 1) EDA on Categorical Values

### Number of the patients who are diagnosed with PCOS
"""

df['PCOS'].value_counts().to_frame(name='0/1:N/Y')

"""### Number of patients that are pregnant"""

df['Pregnant'].value_counts()

sns.countplot(df['PCOS'])

"""### PCOS vs Pregnancy"""

pd.crosstab(df.PCOS,df.Pregnant,margins=True).T

"""We infer that out of 177 patients that were diagnosed with PCOS,113 weren't pregnant whereas 64 were pregnant.
That indicates that the chances of having a infant is only **36%**

***Ergo, PCOS reduces the chances of having babies***

### PCOS vs No of abortions
"""

pd.crosstab(df.PCOS,df.Abortions,margins=True)

"""Binning the Number of Abortions"""

df['Abortion_band']=0
df.loc[df['Abortion_band']<=0 ,'Abortion_band']=0
df.loc[(df['Abortions']>0),'Abortion_band']=1

pd.crosstab(df.PCOS,df.Abortion_band,margins=True).T

"""We can infer that patients suffering from PCOS have a chance of 82% in going through an abortion

Dropping the Abortions Column
"""

df = df.drop(['Abortions'],axis = 1)

"""### PCOS vs Weight Gain"""

pd.crosstab(df.PCOS,df.Weight_gain,margins=True).T

"""We infer that out of 177 patients that were diagnosed with PCOS 56 didn't have a major change in weight whereas 121 had a great spurt in weight.
That indicates that **68%** of patients had weight gain. 

***Ergo, PCOS leads to Weight Gain***

### PCOS vs Hirsutism

HAIR GROWTH ANALYSIS
"""

pd.crosstab(df.PCOS,df.hair_growth,margins=True).T

"""HAIR LOSS ANALYSIS"""

pd.crosstab(df.PCOS,df.Hair_loss,margins = True).T

"""We infer that 101 patients noticed abnormal hair growth when diagnosed with PCOS and 102 patients noticed abnormal hair loss also, which constitutes about **57%** totally. 

***Ergo, PCOS can lead to abnormal increase in either Hair Growth or Hair Fall***.

### PCOS vs Skin Darkening
"""

pd.crosstab(df.PCOS,df.Skin_darkening,margins = True).T

"""We can infer that the patients skin darkens **62%** of the time when suffering from PCOS.

***Ergo,PCOS results in Skin Darkening***

### PCOS vs Pimples
"""

pd.crosstab(df.PCOS,df.Pimples,margins = True).T

"""We can infer that patients see a sustaintial increase ~ (**69%**) in pimples when suffering from PCOS.

***Ergo, PCOS increases the state of pimples on the face.***

## 2) EDA on Continuous Values
"""

df.head()

"""### Age Band"""

sns.set(style='whitegrid', palette="deep", font_scale=1.1, rc={"figure.figsize": [8, 5]})
sns.distplot(
    df['Age'], norm_hist=False, kde=False, bins=20, hist_kws={"alpha": 1}
).set(xlabel='Age', ylabel='Count');

print('The minimum age of a patient here is:',min(df.Age))
print('The maximum age of a patient here is:',max(df.Age))

"""Since Age is a continuous variable, therefore to compare them, we group the ages into bins.Since the minimum age is 20 and maximum age is 48, we divide the ages into bins of 4 having age differences of 7"""

df['Age_band']=1
df.loc[df['Age_band']<=27 ,'Age_band']=1
df.loc[(df['Age']>27)&(df['Age']<=34),'Age_band']=2
df.loc[(df['Age']>34)&(df['Age']<=41),'Age_band']=3
df.loc[(df['Age']>41)&(df['Age']<=48),'Age_band']=4

"""Group 1 - Age <= 27

---


Group 2 - Age > 27 and Age <= 34

---


Group 3 - Age > 34 and Age <= 41

---


Group 4 - Age > 41 and Age <= 48

### PCOS vs Age
"""

pd.crosstab(df.Age_band,df.PCOS,margins = True)

"""We infer that out of 177 patients daignosed with PCOS, the highest number of patients were found in Group 1 and 2.

***Ergo, chances of females having PCOS until the age of 34 is 81%***

### PCOS vs Pulse Rate
"""

pd.crosstab(df.PCOS,df.PulseRate,margins=True)

"""The chances of PCOS affecting the patients pulse rate is significantly low.
In most of the cases, the pulse rate has no connection with PCOS and turns out to be conventional
"""

df.head()

"""### PCOS vs FSH/LH ratio

FSH is a follicle Stimulating Hormone. Women with PCOS often do not ovulate on a monthly basis due to low FSH levels.

LH is a Luteinizing hormone. Women with PCOS often have high levels of LH secretion.

The levels of FSH and LH lies between 5-20 mlU/ml range for a normal woman.
"""

pd.crosstab(df.PCOS,df.FSH_LH_ratio>0.3,margins=True)

"""We can notice that as the ratio increases, the number of PCOS patients decreases.Also for PCOS patients, the ratio is close to 0.33. 
Or LH level is often two or three times that of the FSH level. For example, it is typical for women with PCOS to have an LH level of about 18 mlU/ml and a FSH level of about 6 mlU/ml. This situation is called an elevated LH to FSH ratio or a ratio of 3:1. This change in the LH to FSH ratio is enough to disrupt ovulation.

### PCOS vs TSH and AMH and PRL and Vitd3 levels

***TSH is a thyroid stimulating hormone.***

Women with PCOS usually have normal TSH levels (0.4-3.8 uIU/ml). TSH is checked to rule out other problems, such as an underactive or overactive thyroid, which often cause irregular or lack of periods and anovulation. 

---
***AMH is a Anti Mullerian Hormone***

Women with PCOS often have elevated AMH levels. At any age, a score over 48 pmol/L is considered high and could be a sign of PCOS. 

---
***PRL is Prolactin level.***
Patients with PCOS can have mildly elevated prolactin levels

---
***Vitd3 is Vitamin D3 level***
The prevalence of vitamin D deficiency in women with PCOS is about 67-85%

### PCOS vs Follicle Count
"""

pd.crosstab(df.PCOS,(df.Follicle_count>15),margins=True).T

"""A typical antral follicle count is 10-15 follicles totally.
We can see that patients having count more than 15 have higher chances of having PCOS. In our dataset, we have 76% of our patients having count>15 and are suffering from PCOS.

***Ergo,having follicle count more than 15 can show high signs of PCOS***

# Feature Scaling
"""

sns.heatmap(df.corr(),annot=True,linewidths=0.9)
fig = plt.gcf()
fig.set_size_inches(40,25)
plt.show()

"""We drop the column Weight since there is a high positive co-relation between the features Weight and PCOS"""

df = df.drop(['Weight'],axis=1)

df.columns

"""# Dividing the data into Test and Train"""

from sklearn.model_selection import train_test_split 
X = df.iloc[:,1:].values
y= df.iloc[:,:1].values
train_X,test_X,train_y,test_y = train_test_split(X,y,test_size=0.3,random_state=0,stratify=df['PCOS'])

"""# Standardising the Data"""

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
train_X = sc.fit_transform(train_X)
test_X = sc.transform(test_X)

"""# Predicting the Model

## Importing the Libraries
"""

from sklearn.linear_model import LogisticRegression as lr
from sklearn import svm
from sklearn.ensemble import RandomForestClassifier as rfc
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB as nb
from sklearn.tree import DecisionTreeClassifier #Decision Tree
from sklearn import metrics
from sklearn.metrics import confusion_matrix

"""## Algorithms in Use

1. Logistic Regression
2. Support Vector Machine
3. Random Forest
4. KNN
5. Naive Bayes
6. Decision Trees

### Logistic Regression
"""

import warnings
warnings.filterwarnings('ignore')

model_lr = lr()
model_lr.fit(train_X,train_y)
lr_pred = model_lr.predict(test_X)
print('Accuracy of Logistic Regression is ',metrics.accuracy_score(lr_pred,test_y)*100,'%')
print('---------------------------------------------------')
print('The confusion Matrix')
confusion_matrix(test_y,lr_pred)

"""### Support Vector Machine - RBF"""

model_svm_rbf=svm.SVC(kernel='rbf',C=1,gamma=0.1)
model_svm_rbf.fit(train_X,train_y)
svm_pred_rbf= model_svm_rbf.predict(test_X)
print('Accuracy of SVM - RBF is',metrics.accuracy_score(svm_pred_rbf,test_y)*100,'%')
print('---------------------------------------------------')
print('The confusion Matrix')
confusion_matrix(test_y,svm_pred_rbf)

"""### Support Vector Machine - Linear"""

model_svm_linear=svm.SVC(kernel='linear',C=1,gamma=0.1)
model_svm_linear.fit(train_X,train_y)
svm_pred_linear = model_svm_linear.predict(test_X)
print('Accuracy of SVM - Linear is',metrics.accuracy_score(svm_pred_linear,test_y)*100,'%')
print('---------------------------------------------------')
print('The confusion Matrix')
confusion_matrix(test_y,svm_pred_linear)

"""### Random Forest"""

model_rfc=rfc(n_estimators=100)
model_rfc.fit(train_X,train_y)
prediction7=model_rfc.predict(test_X)
print('The accuracy of the Random Forests is',metrics.accuracy_score(prediction7,test_y)*100,'%')
print('---------------------------------------------------')
print('The confusion Matrix')
confusion_matrix(test_y,prediction7)

"""### KNN"""

a_index=list(range(1,11))
a=pd.Series()
x=[0,1,2,3,4,5,6,7,8,9,10]
for i in list(range(1,11)):
    model_knn=KNeighborsClassifier(n_neighbors=i) 
    model_knn.fit(train_X,train_y)
    prediction=model_knn.predict(test_X)
    a=a.append(pd.Series(metrics.accuracy_score(prediction,test_y)))
plt.plot(a_index, a)
plt.xticks(x)
fig=plt.gcf()
fig.set_size_inches(12,6)
plt.show()
print('Accuracies for different values of n are:',a.values,'with the max value as ',a.values.max()*100,'%')
print('---------------------------------------------------')
print('The confusion Matrix')
confusion_matrix(test_y,prediction)

"""### Naive Bayes"""

model_naive = nb()
model_naive.fit(train_X,train_y)
prediction6=model_naive.predict(test_X)
print('The accuracy of the NaiveBayes is',metrics.accuracy_score(prediction6,test_y)*100,'%')
print('---------------------------------------------------')
print('The confusion Matrix')
confusion_matrix(test_y,prediction6)

"""### Decision Tree"""

model_decision_tree=DecisionTreeClassifier()
model_decision_tree.fit(train_X,train_y)
dt_pred=model_decision_tree.predict(test_X)
print('The accuracy of the Decision Tree is',metrics.accuracy_score(dt_pred,test_y)*100,'%')
print('---------------------------------------------------')
print('The confusion Matrix')
confusion_matrix(test_y,dt_pred)

df.head()